import { FormKitExtendableSchemaRoot } from '@formkit/core';
import { FormKitLibrary } from '@formkit/core';
import { FormKitMiddleware } from '@formkit/core';
import { FormKitNode } from '@formkit/core';
import { FormKitPlugin } from '@formkit/core';
import { FormKitSchemaComposable } from '@formkit/core';
import { FormKitSchemaCondition } from '@formkit/core';
import { FormKitSchemaNode } from '@formkit/core';
import { FormKitTypeDefinition } from '@formkit/core';

/**
 * The button classification.
 * @public
 */
export declare const button: FormKitTypeDefinition;

/**
 * The checkbox input type.
 * @public
 */
export declare const checkbox: FormKitTypeDefinition;

/**
 * Adds checkbox selection support
 * @param node - Node the feature is added to
 * @public
 */
declare function checkboxes(node: FormKitNode): void;

/**
 * The color input.
 * @public
 */
export declare const color: FormKitTypeDefinition;

/**
 * Creates a new section key.
 *
 * @param key - A new section key name.
 * @param schema - The default schema in this composable slot.
 * @returns
 * @public
 */
export declare function composable(key: string, schema: FormKitInputSchema): FormKitSchemaComposable;

/**
 *
 * @param libraries - One or many formkit urls.
 * @returns
 * @public
 */
export declare function createLibraryPlugin(...libraries: FormKitLibrary[]): FormKitPlugin;

/**
 * The date input.
 * @public
 */
export declare const date: FormKitTypeDefinition;

/**
 * The datetime-local input.
 * @public
 */
export declare const datetimeLocal: FormKitTypeDefinition;

/**
 * Allows disabling children of this.
 * @param node - The FormKitNode of the form/group/list
 * @public
 */
declare function disables(node: FormKitNode): void;

/**
 * The email input.
 * @public
 */
export declare const email: FormKitTypeDefinition;

/**
 * Extends a single schema node with an extension. The extension can be any partial node including strings.
 * @param schema - Extend a base schema node.
 * @param extension - The values to extend on the base schema node.
 * @returns
 * @public
 */
export declare function extendSchema(schema: FormKitSchemaNode, extension?: Partial<FormKitSchemaNode>): FormKitSchemaNode;

export declare const features: {
    checkbox: typeof checkboxes;
    disables: typeof disables;
    files: typeof files;
    form: typeof form_2;
    ignore: typeof ignore;
    initialValue: typeof initialValue;
    localize: typeof localize;
    normalizeBoxes: typeof normalizeBoxes;
    options: typeof options;
    radios: typeof radios;
    select: typeof select_2;
};

/**
 * The file input.
 * @public
 */
export declare const file: FormKitTypeDefinition;

declare function files(node: FormKitNode): void;

/**
 * The form input type.
 * @public
 */
export declare const form: FormKitTypeDefinition;

/**
 * Converts the options prop to usable values.
 * @param node - A formkit node.
 * @public
 */
declare function form_2(node: FormKitNode): void;

/**
 * A single file object in FormKitâ€™s synthetic "FileList".
 * @public
 */
export declare interface FormKitFile {
    name: string;
    file?: File;
}

/**
 * A synthetic array-based "FileList".
 * @public
 */
export declare type FormKitFileValue = FormKitFile[];

/**
 * Either a schema node, or a function that returns a schema node.
 * @public
 */
export declare type FormKitInputSchema = ((children?: string | FormKitSchemaNode[] | FormKitSchemaCondition) => FormKitSchemaNode) | FormKitSchemaNode;

/**
 * Options should always be formated as an array of objects with label and value
 * properties.
 * @public
 */
export declare type FormKitOptionsList = Array<{
    label: string;
    value: unknown;
    __original?: any;
} & {
    [index: string]: any;
}>;

/**
 * The group input type.
 * @public
 */
export declare const group: FormKitTypeDefinition;

/**
 * The hidden input.
 * @public
 */
export declare const hidden: FormKitTypeDefinition;

/**
 * Applies ignore="true" by default.
 * @param node - The node
 * @public
 */
declare function ignore(node: FormKitNode): void;

declare function initialValue(node: FormKitNode): void;

declare namespace inputs {
    export {
        color,
        date,
        datetimeLocal,
        email,
        month,
        number,
        password,
        search,
        tel,
        time,
        text,
        url,
        week,
        range,
        textarea,
        submit,
        button,
        hidden,
        select,
        checkbox,
        radio,
        group,
        form,
        list,
        file,
        FormKitFile,
        FormKitFileValue
    }
}
export { inputs }

/**
 * The list input type.
 * @public
 */
export declare const list: FormKitTypeDefinition;

/**
 * Creates a new feature that generates a localization message of type ui
 * for use on a given component.
 *
 * @param key - The key of the message
 * @param value - The value of the message
 * @returns
 * @public
 */
export declare function localize(key: string, value?: string): (node: FormKitNode) => void;

/**
 * The month input.
 * @public
 */
export declare const month: FormKitTypeDefinition;

/**
 * Normalize the boxes.
 * @param node - The node
 * @returns
 * @public
 */
declare function normalizeBoxes(node: FormKitNode): FormKitMiddleware<{
    prop: string | symbol;
    value: any;
}>;

/**
 * The number input.
 * @public
 */
export declare const number: FormKitTypeDefinition;

/**
 * Converts the options prop to usable values.
 * @param node - A formkit node.
 * @public
 */
declare function options(node: FormKitNode): void;

/**
 * The password input.
 * @public
 */
export declare const password: FormKitTypeDefinition;

/**
 * The radio input type.
 * @public
 */
export declare const radio: FormKitTypeDefinition;

/**
 * Determines if a given radio input is being evaluated.
 * @param node - The radio input group.
 * @public
 */
declare function radios(node: FormKitNode): void;

/**
 * The range input.
 * @public
 */
export declare const range: FormKitTypeDefinition;

/**
 * The search input.
 * @public
 */
export declare const search: FormKitTypeDefinition;

/**
 * The select input type.
 * @public
 */
export declare const select: FormKitTypeDefinition;

/**
 * Converts the options prop to usable values.
 * @param node - A formkit node.
 * @public
 */
declare function select_2(node: FormKitNode): void;

/**
 * The submit input.
 * @public
 */
export declare const submit: FormKitTypeDefinition;

/**
 * The tel input.
 * @public
 */
export declare const tel: FormKitTypeDefinition;

/**
 * The text input.
 * @public
 */
export declare const text: FormKitTypeDefinition;

/**
 * The textarea input.
 * @public
 */
export declare const textarea: FormKitTypeDefinition;

/**
 * The time input.
 * @public
 */
export declare const time: FormKitTypeDefinition;

/**
 * The url input.
 * @public
 */
export declare const url: FormKitTypeDefinition;

/**
 * Creates an input schema with all of the wrapping base schema.
 * @param inputSchema - Content to store in the input section key location.
 * @public
 */
export declare function useSchema(inputSchema: FormKitInputSchema): FormKitExtendableSchemaRoot;

/**
 * The week input.
 * @public
 */
export declare const week: FormKitTypeDefinition;

export { }
